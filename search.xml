<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaIO</title>
    <url>/2020/04/22/IO/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="文件字节流代码"><a href="#文件字节流代码" class="headerlink" title="文件字节流代码"></a>文件字节流代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> teset <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buff,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> teset <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len=bis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buff,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">    bis.close();</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>​    InputStreamReader&amp;OutputStreamWriter</p>
<p>​    以字符的形式操作字节流（纯文本），可以指定字符集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zhuangshi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换流：InputStreamReader OutputStreamWriter</span></span><br><span class="line"><span class="comment"> * 1、以字符的形式操作字节流（纯文本）</span></span><br><span class="line"><span class="comment"> * 2、指定字符集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 19485</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span>(BufferedReader isReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">			BufferedWriter isWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));)&#123;</span><br><span class="line">			</span><br><span class="line">			String string = <span class="string">""</span>;</span><br><span class="line">			<span class="keyword">while</span> (!string.equals(<span class="string">"exit"</span>))&#123;</span><br><span class="line">				string = isReader.readLine();</span><br><span class="line">				isWriter.write(string,<span class="number">0</span>,string.length());</span><br><span class="line">				isWriter.newLine();</span><br><span class="line">				isWriter.flush();</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>​    DataOutputStream和DataInputStream    </p>
<p>​    该IO流不仅保存数据而且还保存了数据类型，在读取的时候要保持读取和写出的顺序一致。数据流也是装饰流所以底层还是需要节点流支持。</p>
<h4 id="2、代码演示（不完整）"><a href="#2、代码演示（不完整）" class="headerlink" title="2、代码演示（不完整）"></a>2、代码演示（不完整）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写出</span></span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> BufferedOutputStream(baos));</span><br><span class="line"><span class="comment">//操作数据类型+数据</span></span><br><span class="line">dos.writeUTF(<span class="string">"满纸荒唐言，谁解其中味。"</span>);</span><br><span class="line">dos.writeInt(<span class="number">18</span>);</span><br><span class="line">dos.writeBoolean(<span class="keyword">false</span>);</span><br><span class="line">dos.writeChar(<span class="string">'a'</span>);</span><br><span class="line">dos.flush();</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] datas=baos.toByteArray();</span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(datas)));</span><br><span class="line"><span class="comment">//顺序与写出一致</span></span><br><span class="line">String msg = dis.readUTF();</span><br><span class="line"><span class="keyword">int</span> age = dis.readInt();</span><br><span class="line"><span class="keyword">boolean</span> flag = dis.readBoolean();</span><br><span class="line"><span class="keyword">char</span> a = dis.readChar();</span><br><span class="line"></span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>



<h2 id="对象流（把自己的对象藏起来并且持久化-doge）"><a href="#对象流（把自己的对象藏起来并且持久化-doge）" class="headerlink" title="对象流（把自己的对象藏起来并且持久化/doge）"></a>对象流（把自己的对象藏起来并且持久化/doge）</h2><h3 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h3><p>​    序列化和反序列化</p>
<p>​    ObjectInputStream&amp;ObjectOutPutSteam</p>
<p>​    1.先写出后读取，2.读取的顺序和写出的顺序保持一致，3.但不是所有的对象都可以序列化，如果想序列化必须实现接口serializable。与数据流相比对象流多了个writeObject()和readObject()方法。</p>
<h3 id="2、代码-不完整"><a href="#2、代码-不完整" class="headerlink" title="2、代码(不完整)"></a>2、代码(不完整)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写出</span></span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream dos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> BufferedOutputStream(baos));</span><br><span class="line"><span class="comment">//操作数据类型+数据</span></span><br><span class="line">dos.writeUTF(<span class="string">"满纸荒唐言，谁解其中味。"</span>);</span><br><span class="line">dos.writeInt(<span class="number">18</span>);</span><br><span class="line">dos.writeBoolean(<span class="keyword">false</span>);</span><br><span class="line">dos.writeChar(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">//写出对象</span></span><br><span class="line">dos.WriteObject(<span class="string">"德不孤，必有邻。"</span>);</span><br><span class="line">dos.writeObject(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//自定义的类实现序列化</span></span><br><span class="line">dos.writeObject(<span class="keyword">new</span> employee());</span><br><span class="line">dos.flush();</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] datas=baos.toByteArray();</span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">ObjectInputStream dis = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(datas)));</span><br><span class="line"><span class="comment">//顺序与写出一致</span></span><br><span class="line">String msg = dis.readUTF();</span><br><span class="line"><span class="keyword">int</span> age = dis.readInt();</span><br><span class="line"><span class="keyword">boolean</span> flag = dis.readBoolean();</span><br><span class="line"><span class="keyword">char</span> a = dis.readChar();</span><br><span class="line">Object str = dos.readObject();</span><br><span class="line">Object date = dos.readObject();</span><br><span class="line">Object emp = dos.readObject();</span><br><span class="line"><span class="comment">//把对象类型给转换回来</span></span><br><span class="line"><span class="keyword">if</span>(str <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">	String steObj = (String)str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(date <span class="keyword">instanceof</span> Date)&#123;</span><br><span class="line">	Date dateObj = (Date)date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(emp <span class="keyword">instanceof</span> employee)&#123;</span><br><span class="line">	employee empObj = (employee)emp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> String name;<span class="comment">//该数据不需要序列化就加transient</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">employee</span><span class="params">(String name, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h2><p>​    PrintStream只有输出没有输入。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zhuangshi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">		<span class="comment">//打印流System.out</span></span><br><span class="line">		PrintStream ps = System.out;</span><br><span class="line">		ps.println(<span class="string">"打印流"</span>);</span><br><span class="line">		ps.println(<span class="keyword">true</span>);</span><br><span class="line">		</span><br><span class="line">		ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"print.txt"</span>)));</span><br><span class="line">		ps.println(<span class="string">"打印流"</span>);</span><br><span class="line">		ps.print(<span class="keyword">true</span>);</span><br><span class="line">		ps.flush();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//重定向输出端</span></span><br><span class="line">		System.setOut(ps);</span><br><span class="line">		System.out.println(<span class="string">"change"</span>);</span><br><span class="line">		ps.close();</span><br><span class="line">		<span class="comment">//重定向回控制台</span></span><br><span class="line">		System.setOut(<span class="keyword">new</span> PrintStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(FileDescriptor.out)),<span class="keyword">true</span>));</span><br><span class="line">		System.out.println(<span class="string">"I am backing"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件分割"><a href="#文件分割" class="headerlink" title="文件分割"></a>文件分割</h2><p>​    RandomAccessFile 支持读取和写入随机访问文件。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zhuangshi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * RandomAccessFile</span></span><br><span class="line"><span class="comment"> * 从指定位置开始读取之后的所有内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"E:/Java_SXT/IO_day01/src/zhuangshi/Test01.java"</span>), <span class="string">"r"</span>);</span><br><span class="line">		<span class="comment">//选择读取的开始位置，从这里开始读取剩下的所有内容</span></span><br><span class="line">		raf.seek(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//读取</span></span><br><span class="line">		<span class="comment">//操作（分段读取）</span></span><br><span class="line">		<span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> ((len=raf.read(flush))!=-<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="keyword">new</span> String(flush,<span class="number">0</span>,len));</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		raf.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 分断读取文件内容</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subsection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"E:/Java_SXT/IO_day01/src/zhuangshi/Test01.java"</span>), <span class="string">"r"</span>);</span><br><span class="line">		<span class="comment">//选择读取的开始位置，从这里开始读取剩下的所有内容</span></span><br><span class="line">		<span class="keyword">int</span> startpos = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">int</span> exactly = <span class="number">2050</span>;</span><br><span class="line">		raf.seek(startpos);</span><br><span class="line">		<span class="comment">//读取</span></span><br><span class="line">		<span class="comment">//操作（分段读取）</span></span><br><span class="line">		<span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> ((len=raf.read(flush))!=-<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exactly&gt;=len) &#123;</span><br><span class="line">				System.out.println(<span class="keyword">new</span> String(flush,<span class="number">0</span>,len));</span><br><span class="line">				exactly-=len;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="keyword">new</span> String(flush,<span class="number">0</span>,exactly));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		raf.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>-Java -IO</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsIO</title>
    <url>/2020/04/22/CommonsIO/</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="CommonsIO/1.png" title="实例图片">示意</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>-Java -IO</tag>
      </tags>
  </entry>
</search>
