<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaIO</title>
    <url>/2020/04/22/IO/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>​    DataOutputStream和DataInputStream    </p>
<p>​    该IO流不仅保存数据而且还保存了数据类型，在读取的时候要保持读取和写出的顺序一致。数据流也是装饰流所以底层还是需要节点流支持。</p>
<h4 id="2、代码演示"><a href="#2、代码演示" class="headerlink" title="2、代码演示"></a>2、代码演示</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;写出</span><br><span class="line">ByteArrayOutputStream baos &#x3D; new ByteArrayOutputStream();</span><br><span class="line">DataOutputStream dos &#x3D; new DataOutputStream(new BufferedOutputStream(baos));</span><br><span class="line">&#x2F;&#x2F;操作数据类型+数据</span><br><span class="line">dos.writeUTF(&quot;满纸荒唐言，谁解其中味。&quot;);</span><br><span class="line">dos.writeInt(18);</span><br><span class="line">dos.writeBoolean(false);</span><br><span class="line">dos.writeChar(&#39;a&#39;);</span><br><span class="line">dos.flush();</span><br><span class="line"></span><br><span class="line">byte[] datas&#x3D;baos.toByteArray();</span><br><span class="line">&#x2F;&#x2F;读取</span><br><span class="line">DataInputStream dis &#x3D; new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(datas)));</span><br><span class="line">&#x2F;&#x2F;顺序与写出一致</span><br><span class="line">String msg &#x3D; dis.readUTF();</span><br><span class="line">int age &#x3D; dis.readInt();</span><br><span class="line">boolean flag &#x3D; dis.readBoolean();</span><br><span class="line">char a &#x3D; dis.readChar();</span><br><span class="line"></span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>



<h2 id="对象流（把自己的对象藏起来并且持久化-doge）"><a href="#对象流（把自己的对象藏起来并且持久化-doge）" class="headerlink" title="对象流（把自己的对象藏起来并且持久化/doge）"></a>对象流（把自己的对象藏起来并且持久化/doge）</h2><h3 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h3><p>​    序列化和反序列化</p>
<p>​    ObjectInputStream&amp;ObjectOutPutSteam</p>
<p>​    1.先写出后读取，2.读取的顺序和写出的顺序保持一致，3.但不是所有的对象都可以序列化，如果想序列化必须实现接口serializable。与数据流相比对象流多了个writeObject()和readobject()方法。</p>
<h3 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;写出</span><br><span class="line">ByteArrayOutputStream baos &#x3D; new ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream dos &#x3D; new ObjectOutputStream(new BufferedOutputStream(baos));</span><br><span class="line">&#x2F;&#x2F;操作数据类型+数据</span><br><span class="line">dos.writeUTF(&quot;满纸荒唐言，谁解其中味。&quot;);</span><br><span class="line">dos.writeInt(18);</span><br><span class="line">dos.writeBoolean(false);</span><br><span class="line">dos.writeChar(&#39;a&#39;);</span><br><span class="line">&#x2F;&#x2F;写出对象</span><br><span class="line">dos.WriteObject(&quot;德不孤，必有邻。&quot;);</span><br><span class="line">dos.writeObject(new Date());</span><br><span class="line">&#x2F;&#x2F;自定义的类实现序列化</span><br><span class="line">dos.writeObject(new employee());</span><br><span class="line">dos.flush();</span><br><span class="line"></span><br><span class="line">byte[] datas&#x3D;baos.toByteArray();</span><br><span class="line">&#x2F;&#x2F;读取</span><br><span class="line">ObjectInputStream dis &#x3D; new ObjectInputStream(new BufferedInputStream(new ByteArrayInputStream(datas)));</span><br><span class="line">&#x2F;&#x2F;顺序与写出一致</span><br><span class="line">String msg &#x3D; dis.readUTF();</span><br><span class="line">int age &#x3D; dis.readInt();</span><br><span class="line">boolean flag &#x3D; dis.readBoolean();</span><br><span class="line">char a &#x3D; dis.readChar();</span><br><span class="line">Object str &#x3D; dos.readObject();</span><br><span class="line">Object date &#x3D; dos.readObject();</span><br><span class="line">Object emp &#x3D; dos.readObject();</span><br><span class="line">&#x2F;&#x2F;把对象类型给转换回来</span><br><span class="line">if(str instanceof String)&#123;</span><br><span class="line">	String steObj &#x3D; (String)str;</span><br><span class="line">&#125;</span><br><span class="line">if(date instanceof Date)&#123;</span><br><span class="line">	Date dateObj &#x3D; (Date)date;</span><br><span class="line">&#125;</span><br><span class="line">if(emp instanceof employee)&#123;</span><br><span class="line">	employee empObj &#x3D; (employee)emp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">class employee implements Serializable&#123;</span><br><span class="line">	private transient String name;&#x2F;&#x2F;该数据不需要序列化就加transient</span><br><span class="line">	private double salary;</span><br><span class="line">	</span><br><span class="line">	public employee() &#123;</span><br><span class="line">		super();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public employee(String name, double salary) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">		this.salary &#x3D; salary;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public double getSalary() &#123;</span><br><span class="line">		return salary;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setSalary(double salary) &#123;</span><br><span class="line">		this.salary &#x3D; salary;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​    </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>-Java -IO</tag>
      </tags>
  </entry>
</search>
